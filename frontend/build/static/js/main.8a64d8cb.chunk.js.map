{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","width","maxWidth","margin","padding","borderRadius","boxShadow","background","as","size","textAlign","mb","spacing","id","isRequired","type","placeholder","onChange","e","target","focusBorderColor","h","onClick","bg","_hover","colorScheme","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","backgroundColor","color","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","border","style","marginTop","loadingText","fontSize","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","w","m","borderWidth","fontFamily","isFitted","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","marginLeft","content","UserBadgeItem","handleFunction","admin","px","py","flexWrap","transform","transition","fontWeight","fontStyle","ml","Close","UserListItem","borderColor","flex","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","pb","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","pl","notif","n","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a64d8cb.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack, Box, Heading } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      width=\"100%\"\n      maxWidth=\"400px\"\n      margin=\"auto\"\n      padding=\"30px\"\n      borderRadius=\"lg\"\n      boxShadow=\"0 4px 6px rgba(0, 0, 0, 0.1)\"\n      background=\"white\"\n    >\n      <Heading as=\"h2\" size=\"xl\" textAlign=\"center\" mb=\"6\">\n        Login\n      </Heading>\n      <VStack spacing=\"20px\">\n        <FormControl id=\"email\" isRequired>\n          <FormLabel>Email Address</FormLabel>\n          <Input\n            value={email}\n            type=\"email\"\n            placeholder=\"Enter Your Email Address\"\n            onChange={(e) => setEmail(e.target.value)}\n            borderRadius=\"md\"\n            focusBorderColor=\"blue.400\"\n          />\n        </FormControl>\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter password\"\n              borderRadius=\"md\"\n              focusBorderColor=\"blue.400\"\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button \n                h=\"1.75rem\" \n                size=\"sm\" \n                onClick={handleClick}\n                bg=\"gray.200\"\n                _hover={{ bg: \"gray.300\" }}\n              >\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <Button\n          colorScheme=\"blue\"\n          width=\"100%\"\n          onClick={submitHandler}\n          isLoading={loading}\n          borderRadius=\"md\"\n          _hover={{ bg: \"blue.500\" }}\n        >\n          Login\n        </Button>\n        <Button\n          variant=\"outline\"\n          colorScheme=\"red\"\n          width=\"100%\"\n          onClick={() => {\n            setEmail(\"guest@example.com\");\n            setPassword(\"123456\");\n          }}\n          borderRadius=\"md\"\n          _hover={{ bg: \"red.50\" }}\n        >\n          Get Guest User Credentials\n        </Button>\n      </VStack>\n    </Box>\n  );\n};\n\nexport default Login;","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack, Box, Heading, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/dtbjwlzrt/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <Box\n      maxWidth=\"400px\"\n      margin=\"auto\"\n      padding=\"30px\"\n      borderRadius=\"lg\"\n      boxShadow=\"0 4px 6px rgba(0, 0, 0, 0.1)\"\n      backgroundColor=\"white\"\n    >\n      <Heading as=\"h2\" size=\"xl\" textAlign=\"center\" mb=\"6\" color=\"blue.500\">\n        Sign Up\n      </Heading>\n      <VStack spacing=\"20px\">\n        <FormControl id=\"first-name\" isRequired>\n          <FormLabel>Name</FormLabel>\n          <Input\n            placeholder=\"Enter Your Name\"\n            onChange={(e) => setName(e.target.value)}\n            borderRadius=\"md\"\n            focusBorderColor=\"blue.400\"\n          />\n        </FormControl>\n        <FormControl id=\"email\" isRequired>\n          <FormLabel>Email Address</FormLabel>\n          <Input\n            type=\"email\"\n            placeholder=\"Enter Your Email Address\"\n            onChange={(e) => setEmail(e.target.value)}\n            borderRadius=\"md\"\n            focusBorderColor=\"blue.400\"\n          />\n        </FormControl>\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter Password\"\n              onChange={(e) => setPassword(e.target.value)}\n              borderRadius=\"md\"\n              focusBorderColor=\"blue.400\"\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} bg=\"gray.200\" _hover={{ bg: \"gray.300\" }}>\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <FormControl id=\"confirm-password\" isRequired>\n          <FormLabel>Confirm Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Confirm password\"\n              onChange={(e) => setConfirmpassword(e.target.value)}\n              borderRadius=\"md\"\n              focusBorderColor=\"blue.400\"\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} bg=\"gray.200\" _hover={{ bg: \"gray.300\" }}>\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <FormControl id=\"pic\">\n          <FormLabel>Upload your Picture</FormLabel>\n          <Input\n            type=\"file\"\n            p={1.5}\n            accept=\"image/*\"\n            onChange={(e) => postDetails(e.target.files[0])}\n            border=\"none\"\n          />\n        </FormControl>\n        <Button\n          colorScheme=\"blue\"\n          width=\"100%\"\n          style={{ marginTop: 15 }}\n          onClick={submitHandler}\n          isLoading={picLoading}\n          loadingText=\"Signing Up\"\n          borderRadius=\"md\"\n          _hover={{ bg: \"blue.500\" }}\n        >\n          Sign Up\n        </Button>\n        <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n          By signing up, you agree to our Terms and Privacy Policy.\n        </Text>\n      </VStack>\n    </Box>\n  );\n};\n\nexport default Signup;","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n        ChitChat App\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge, Box, Text } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"full\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n      display=\"flex\"\n      alignItems=\"center\"\n      flexWrap=\"wrap\"\n      _hover={{\n        transform: \"translateY(-2px)\",\n        boxShadow: \"0 4px 6px rgba(0, 0, 0, 0.1)\",\n      }}\n      transition=\"all 0.3s ease\"\n    >\n      <Box display=\"flex\" alignItems=\"center\">\n        <Text fontWeight=\"bold\" mr={1}>\n          {user.name}\n        </Text>\n        {admin === user._id && (\n          <Text as=\"span\" fontSize=\"10px\" fontStyle=\"italic\" ml={1}>\n            (Admin)\n          </Text>\n        )}\n      </Box>\n      <CloseIcon \n        ml={1} \n        w={3} \n        h={3} \n        _hover={{ \n          color: \"red.500\",\n        }}\n      />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text, Flex } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"gray.100\"\n      _hover={{\n        background: \"teal.500\",\n        color: \"white\",\n        transform: \"translateY(-2px)\",\n        boxShadow: \"0 4px 6px rgba(0, 0, 0, 0.1)\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={4}\n      py={3}\n      mb={3}\n      borderRadius=\"lg\"\n      transition=\"all 0.3s ease\"\n      boxShadow=\"0 2px 4px rgba(0, 0, 0, 0.05)\"\n    >\n      <Flex alignItems=\"center\" width=\"100%\">\n        <Avatar\n          mr={3}\n          size=\"md\"\n          name={user.name}\n          src={user.pic}\n          border=\"2px solid\"\n          borderColor=\"teal.500\"\n        />\n        <Box flex=\"1\">\n          <Text fontWeight=\"bold\" fontSize=\"md\">\n            {user.name}\n          </Text>\n          <Text fontSize=\"sm\" color=\"gray.600\" _hover={{ color: \"white\" }}>\n            {user.email}\n          </Text>\n        </Box>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default UserListItem;","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={4}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      boxShadow=\"0 4px 6px rgba(0, 0, 0, 0.1)\"\n      transition=\"all 0.3s ease\"\n      _hover={{\n        boxShadow: \"0 6px 8px rgba(0, 0, 0, 0.15)\"\n      }}\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          ChitChat is Live\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}